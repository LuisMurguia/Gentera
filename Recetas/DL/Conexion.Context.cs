//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RecetasEntities : DbContext
    {
        public RecetasEntities()
            : base("name=RecetasEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Alumno> Alumnos { get; set; }
        public virtual DbSet<Receta> Recetas { get; set; }
        public virtual DbSet<RecetasAlumno> RecetasAlumnos { get; set; }
    
        public virtual ObjectResult<AllumnosGetAll_Result> AllumnosGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllumnosGetAll_Result>("AllumnosGetAll");
        }
    
        public virtual ObjectResult<RecetasAlumnosGetById_Result> RecetasAlumnosGetById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RecetasAlumnosGetById_Result>("RecetasAlumnosGetById", idParameter);
        }
    
        public virtual ObjectResult<AlumnoGetById_Result> AlumnoGetById(Nullable<int> matricula)
        {
            var matriculaParameter = matricula.HasValue ?
                new ObjectParameter("Matricula", matricula) :
                new ObjectParameter("Matricula", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AlumnoGetById_Result>("AlumnoGetById", matriculaParameter);
        }
    
        public virtual int UpdateReceta(string diagnostico, string tratamiento, Nullable<int> idReceta)
        {
            var diagnosticoParameter = diagnostico != null ?
                new ObjectParameter("Diagnostico", diagnostico) :
                new ObjectParameter("Diagnostico", typeof(string));
    
            var tratamientoParameter = tratamiento != null ?
                new ObjectParameter("Tratamiento", tratamiento) :
                new ObjectParameter("Tratamiento", typeof(string));
    
            var idRecetaParameter = idReceta.HasValue ?
                new ObjectParameter("IdReceta", idReceta) :
                new ObjectParameter("IdReceta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateReceta", diagnosticoParameter, tratamientoParameter, idRecetaParameter);
        }
    
        public virtual ObjectResult<RecetaGetById_Result> RecetaGetById(Nullable<int> idReceta)
        {
            var idRecetaParameter = idReceta.HasValue ?
                new ObjectParameter("IdReceta", idReceta) :
                new ObjectParameter("IdReceta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RecetaGetById_Result>("RecetaGetById", idRecetaParameter);
        }
    
        public virtual int RecetaAdd(Nullable<int> matricula, Nullable<System.DateTime> fecha, string diagnostico, string tratamiento)
        {
            var matriculaParameter = matricula.HasValue ?
                new ObjectParameter("Matricula", matricula) :
                new ObjectParameter("Matricula", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var diagnosticoParameter = diagnostico != null ?
                new ObjectParameter("Diagnostico", diagnostico) :
                new ObjectParameter("Diagnostico", typeof(string));
    
            var tratamientoParameter = tratamiento != null ?
                new ObjectParameter("Tratamiento", tratamiento) :
                new ObjectParameter("Tratamiento", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RecetaAdd", matriculaParameter, fechaParameter, diagnosticoParameter, tratamientoParameter);
        }
    }
}
